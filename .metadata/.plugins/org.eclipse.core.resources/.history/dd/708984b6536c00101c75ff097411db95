package com.ishika.foodwaste.web.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

import jakarta.servlet.http.HttpServletResponse;

@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .csrf(csrf -> csrf.disable())
            .authorizeHttpRequests(auth -> auth
            	       .requestMatchers("/admin/login", "/admin/register").permitAll() // only allow these without login
                       .requestMatchers("/admin/**").authenticated() // others need authentication
                   )
                   .formLogin(form -> form
                       .loginProcessingUrl("/admin/login") // this handles POST login
                       .usernameParameter("email") // match your DTO
                       .passwordParameter("password")
                       .permitAll()
                   )
                   .sessionManagement(session -> session
                       .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) // ensure session is used
                   )
                   .logout(logout -> logout
                       .logoutUrl("/admin/logout")
                       .logoutSuccessHandler((request, response, auth) -> response.setStatus(HttpServletResponse.SC_OK))
                   );

               return http.build();
            		
            		
//            		.requestMatchers("/admin/login", "/admin/register").permitAll()
//            		.requestMatchers("/delivery/deliverylogin", "/delivery/register").permitAll()
//            		.requestMatchers("/donar/login", "/donar/register").permitAll()
//                .requestMatchers("/donor/**").hasAuthority("DONOR")
//                .requestMatchers("/ngo/**").hasAuthority("NGO")
//                .requestMatchers("/delivery/**").hasAuthority("DELIVERY")
//                .requestMatchers("/admin/**").hasAuthority("ADMIN")
//                .anyRequest().authenticated()
//            )
//            .sessionManagement(session -> session
//                    .sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED)
//                )
//                .logout(logout -> logout
//                    .logoutUrl("/admin/logout")
//                    .logoutSuccessUrl("/admin/login")
//                    .invalidateHttpSession(true)
//                    .deleteCookies("JSESSIONID")
//                );
//            return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}
