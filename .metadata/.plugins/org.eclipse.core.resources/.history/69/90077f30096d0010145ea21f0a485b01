package com.ishika.foodwaste.web.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ishika.foodwaste.jpa.entity.Admin;
import com.ishika.foodwaste.jpa.entity.FoodDonation;
import com.ishika.foodwaste.jpa.entity.UserFeedback;
import com.ishika.foodwaste.web.service.AdminService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/admin")
public class AdminController {

    @Autowired
    private AdminService adminService;
    @Autowired
    private PasswordEncoder passwordEncoder;


//    @PostMapping("/login")
//    public ResponseEntity<Admin> login(@RequestParam String email, @RequestParam String password) {
//        Admin admin = adminService.authenticate(email, password);
//        if (admin != null) return ResponseEntity.ok(admin);
//        return ResponseEntity.status(401).build();
//    }
    
    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestParam String email, @RequestParam String password, HttpSession session) {
        Admin admin = adminService.authenticate(email);
        if (admin == null) {
            return ResponseEntity.status(401).body("Admin not found");
        }

        if (passwordEncoder.matches(password, admin.getPassword())) {
            session.setAttribute("admin", admin); // store in session
            return ResponseEntity.ok("Admin login successful");
        } else {
            return ResponseEntity.status(401).body("Incorrect password");
        }
    }

    
    @PostMapping("/register")
    public ResponseEntity<?> registerAdmin(@RequestBody Admin admin) {
        boolean success = adminService.registerAdmin(admin);
        return success
            ? ResponseEntity.ok("Admin registered successfully")
            : ResponseEntity.badRequest().body("Admin registration failed");
    }


    @GetMapping("/dashboard-stats")
    public Map<String, Long> getDashboardStats(HttpSession session) {
        return adminService.getDashboardStats();
    }

    @GetMapping("/donations/unassigned")
    public List<FoodDonation> getUnassignedDonations(@RequestParam("location") String location,HttpSession session) {
        return adminService.getUnassignedDonations(location);
    }

    @PostMapping("/donations/assign")
    public ResponseEntity<String> assignDonation(@RequestParam int donationId, @RequestParam int deliveryPersonId,HttpSession session) {
        boolean assigned = adminService.assignDonation(donationId, deliveryPersonId);
        if (assigned) return ResponseEntity.ok("Donation assigned.");
        return ResponseEntity.badRequest().body("Assignment failed.");
    }

    @GetMapping("/donations/assigned")
    public List<FoodDonation> getAssignedDonations(@RequestParam int adminId,HttpSession session) {
        return adminService.getAssignedDonations(adminId);
    }

    @GetMapping("/analytics/gender")
    public Map<String, Long> getGenderAnalytics(HttpSession session) {
        return adminService.getGenderAnalytics();
    }

    @GetMapping("/analytics/location")
    public Map<String, Long> getLocationAnalytics(HttpSession session) {
        return adminService.getLocationAnalytics();
    }

    @GetMapping("/feedbacks")
    public List<UserFeedback> getAllFeedbacks(HttpSession session) {
        return adminService.getAllFeedbacks();
    }

}
