package com.ishika.foodwaste.jpa.entityManager;

import java.util.List;

import org.springframework.stereotype.Repository;

import com.ishika.foodwaste.jpa.entity.FoodDonation;

import jakarta.persistence.EntityManager;
import jakarta.persistence.NamedQuery;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;
@Repository
@Transactional
public class FoodDonationManager {

    @PersistenceContext
    private EntityManager em;

    // ✅ Add a new food donation
    public boolean addDonation(FoodDonation donation) {
        try {
            em.getTransaction().begin();
            em.persist(donation);
            em.getTransaction().commit();
            return true;
        } catch (Exception e) {
            em.getTransaction().rollback();
            e.printStackTrace();
        }
        return false;
    }
    
    public FoodDonation findById(int id) {
        try {
            return em.find(FoodDonation.class, id);
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Donation not found with ID: " + id);
        }
    }
    
    public boolean save(FoodDonation donation) {
        try {
            em.getTransaction().begin();
            if (donation.getFid() == 0) {
                em.persist(donation); // new donation
            } else {
                em.merge(donation);   // update existing
            }
            em.getTransaction().commit();
            return true;
        } catch (Exception e) {
            em.getTransaction().rollback();
            e.printStackTrace();
        }
        return false;
    }

    // ✅ Get donations by location
    public List<FoodDonation> getDonationsByLocation(String location) {
        try {
            TypedQuery<FoodDonation> query = em.createNamedQuery("FoodDonation.findByLocation", FoodDonation.class);
            query.setParameter("location", location);
            return query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

    // ✅ Get all donations
    public List<FoodDonation> getAllDonations() {
        try {
            TypedQuery<FoodDonation> query = em.createQuery("SELECT f FROM FoodDonation f", FoodDonation.class);
            return query.getResultList();
        } catch (Exception e) {
            e.printStackTrace();
            return null;
        }
    }

//     ✅ Update donation by ID
    public boolean updateDonation(int id, FoodDonation updated) {
        try {
            em.getTransaction().begin();
            FoodDonation existing = em.find(FoodDonation.class, id);
            if (existing != null) {
                existing.setEmail(updated.getEmail());
                existing.setFood(updated.getFood());
                existing.setType(updated.getType());
                existing.setCategory(updated.getCategory());
                existing.setPhoneno(updated.getPhoneno());
                existing.setLocation(updated.getLocation());
                existing.setAddress(updated.getAddress());
                existing.setName(updated.getName());
                existing.setQuantity(updated.getQuantity());
                em.merge(existing);
                em.getTransaction().commit();
                return true;
            }
        } catch (Exception e) {
            em.getTransaction().rollback();
            e.printStackTrace();
        }
        return false;
    }

//     ✅ Delete donation by ID
    public boolean deleteDonationById(int id) {
        try {
            em.getTransaction().begin();
            FoodDonation donation = em.find(FoodDonation.class, id);
            if (donation != null) {
                em.remove(donation);
                em.getTransaction().commit();
                return true;
            }
        } catch (Exception e) {
            em.getTransaction().rollback();
            e.printStackTrace();
        }
        return false;
    }

    // ✅ Count total donations
    public long count() {
        try {
            TypedQuery<Long> query = em.createQuery("SELECT COUNT(f) FROM FoodDonation f", Long.class);
            return query.getSingleResult();
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
    
    


}
