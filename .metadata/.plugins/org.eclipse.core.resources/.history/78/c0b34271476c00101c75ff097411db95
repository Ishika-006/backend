package com.ishika.foodwaste.web.service;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.ishika.foodwaste.jpa.entity.Admin;
import com.ishika.foodwaste.jpa.entity.FoodDonation;
import com.ishika.foodwaste.jpa.entity.UserFeedback;
import com.ishika.foodwaste.jpa.entityManager.AdminManager;
import com.ishika.foodwaste.jpa.entityManager.FoodDonationManager;
import com.ishika.foodwaste.jpa.entityManager.LoginManager;
import com.ishika.foodwaste.jpa.entityManager.UserFeedbackManager;
import com.ishika.foodwaste.web.interfaces.AdminFacade;

import jakarta.persistence.EntityManager;
import jakarta.persistence.TypedQuery;
import jakarta.transaction.Transactional;
@Service
public class AdminService implements AdminFacade {
	   @Autowired
	    private EntityManager entityManager;

	    @Autowired
	    private FoodDonationManager foodDonationRepo;

	    @Autowired
	    private UserFeedbackManager feedbackRepo;

	    @Autowired
	    private LoginManager loginRepo;

	    @Autowired
	    private AdminManager adminRepo;

	    @Override
	    public Admin authenticate(String email, String password) {
	        Admin admin = adminRepo.findByEmail(email);
	        if (admin != null && BCrypt.checkpw(password, admin.getPassword())) {
	            return admin;
	        }
	        return null;
	    }

	    @Override
	    public long getTotalUsers() {
	        return loginRepo.count();
	    }

	    @Override
	    public long getTotalFeedbacks() {
	        return feedbackRepo.count();
	    }

	    @Override
	    public long getTotalDonations() {
	        return foodDonationRepo.count();
	    }

	    @Override
	    public Map<String, Long> getDashboardStats() {
	        Map<String, Long> stats = new HashMap<>();
	        stats.put("users", getTotalUsers());
	        stats.put("feedbacks", getTotalFeedbacks());
	        stats.put("donations", getTotalDonations());
	        return stats;
	    }

	    @Override
	    public List<FoodDonation> getUnassignedDonations(String location) {
	        return foodDonationRepo.getDonationsByLocation(location);
	    }

	    @Transactional
	    @Override
	    public boolean assignDonation(int donationId, int deliveryPersonId) {
	        FoodDonation donation = entityManager.find(FoodDonation.class, donationId);
	        if (donation == null || donation.getAssignedTo() != null) return false;

	        donation.setAssignedTo(deliveryPersonId);
	        entityManager.merge(donation);
	        return true;
	    }

	    @Override
	    public List<FoodDonation> getAssignedDonations(int adminId) {
	        TypedQuery<FoodDonation> query = entityManager.createNamedQuery("FoodDonation.findByAssignedTo", FoodDonation.class);
	        query.setParameter("aid", adminId);
	        return query.getResultList();
	    }

	    @Override
	    public Map<String, Long> getGenderAnalytics() {
	        Map<String, Long> result = new HashMap<>();
	        TypedQuery<Long> maleQuery = entityManager.createNamedQuery("Login.countByGender", Long.class);
	        maleQuery.setParameter("gender", "male");
	        result.put("male", maleQuery.getSingleResult());

	        TypedQuery<Long> femaleQuery = entityManager.createNamedQuery("Login.countByGender", Long.class);
	        femaleQuery.setParameter("gender", "female");
	        result.put("female", femaleQuery.getSingleResult());
	        return result;
	    }

	    @Override
	    public Map<String, Long> getLocationAnalytics() {
	        List<Object[]> results = entityManager
	            .createNamedQuery("FoodDonation.countByLocation", Object[].class)
	            .getResultList();

	        Map<String, Long> locationMap = new HashMap<>();
	        for (Object[] row : results) {
	            String location = (String) row[0];
	            Long count = (Long) row[1];
	            locationMap.put(location, count);
	        }
	        return locationMap;
	    }

//	    public Map<String, Long> getLocationAnalytics() {
//	        Map<String, Long> result = new HashMap<>();
//	        String[] locations = {"madurai", "chennai", "coimbatore"};
//
//	        for (String loc : locations) {
//	            TypedQuery<Long> query = entityManager.createNamedQuery("FoodDonation.countByLocation", Long.class);
//	            query.setParameter("location", loc);
//	            result.put(loc, query.getSingleResult());
//	        }
//	        return result;
//	    }

	    @Override
	    public List<FoodDonation> getDonationsByLocation(String location) {
	        return foodDonationRepo.getDonationsByLocation(location);
	    }

	    @Override
	    public List<UserFeedback> getAllFeedbacks() {
	        return feedbackRepo.getAllFeedbacks();
	    }
}
