package com.ishika.foodwaste.web.controller;

import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.ishika.foodwaste.jpa.entity.Admin;
import com.ishika.foodwaste.jpa.entity.DeliveryPerson;
import com.ishika.foodwaste.web.service.DeliveryService;

import jakarta.servlet.http.HttpSession;

@RestController
@RequestMapping("/delivery")
public class DeliveryController {

    @Autowired
    private DeliveryService deliveryService;
    @Autowired
    private PasswordEncoder passwordEncoder;


    // ✅ Login
//    @PostMapping("/deliverylogin")
//    public ResponseEntity<?> login(@RequestParam String email, HttpSession session) {
//        DeliveryPerson person = deliveryService.getByEmail(email);
//
//        if (person == null) {
//            return ResponseEntity.status(401).body("Invalid credentials");
//        }
//    // ✅ Set session attributes
//    session.setAttribute("Did", person.getDid());
//    session.setAttribute("city", person.getCity());
//
//    return ResponseEntity.ok("Login successful");
//}

    
    
    
//    @PostMapping("/deliverylogin")
//    public ResponseEntity<?> login(@RequestParam String email, @RequestParam String password, HttpSession session) {
//        DeliveryPerson person = deliveryService.getByEmail(email);
//
//        if (person == null) {
//            return ResponseEntity.status(401).body("Email not found");
//        }
//
//        if (passwordEncoder.matches(password, person.getPassword())) {
//            session.setAttribute("Did", person.getDid());
//            session.setAttribute("city", person.getCity());
//            return ResponseEntity.ok("Login successful");
//        } else {
//            return ResponseEntity.status(401).body("Invalid password");
//        }
//        
//        System.out.println("Entered password: " + password);
//    }

    
//    @PostMapping("/deliverylogin")
//    public ResponseEntity<?> login(@RequestParam String email,
//                                   @RequestParam String password,
//                                   HttpSession session) {
//
//        DeliveryPerson person = deliveryService.getByEmail(email);
//
//        if (person == null) {
//            return ResponseEntity.status(401).body("Email not found");
//        }
//
//        System.out.println("Entered raw: " + password);
//        System.out.println("Stored hash: " + person.getPassword());
//
//        if (passwordEncoder.matches(password, person.getPassword())) {
//            session.setAttribute("delivery", person); // required for security filter
//            System.out.println("✅ Password matched");
//            return ResponseEntity.ok("Login successful");
//        } else {
//            System.out.println("❌ Password mismatch");
//            return ResponseEntity.status(401).body("Invalid password");
//        }
//    }

    
    @PostMapping("/deliverylogin")
    public ResponseEntity<?> login(@RequestParam String email, @RequestParam String password, HttpSession session) {
    	DeliveryPerson person = deliveryService.getByEmail(email);
        if (person == null) {
            return ResponseEntity.status(401).body("Admin not found");
        }

        if (passwordEncoder.matches(password, person.getPassword())) {
            session.setAttribute("delivery", person); // store in session
            return ResponseEntity.ok("Admin login successful");
        } else {
            return ResponseEntity.status(401).body("Incorrect password");
        }
    }

    

//    public ResponseEntity<?> login(@RequestBody Map<String, String> data, HttpSession session) {
//        String email = data.get("email");
//        String password = data.get("password");
//
//        String result = deliveryService.login(email, password);
//        if (result.equals("Login successful")) {
//            DeliveryPerson person = deliveryService.getByEmail(email);
//            session.setAttribute("Did", person.getDid());
//            session.setAttribute("name", person.getName());
//            session.setAttribute("city", person.getCity());
//            return ResponseEntity.ok(result);
//        }
//        return ResponseEntity.badRequest().body(result);
//    }

    // ✅ Register
//    @PostMapping("/register")
//    public ResponseEntity<?> register(@RequestBody DeliveryPerson person) {
//        String result = deliveryService.register(person);
//        return result.contains("successful")
//            ? ResponseEntity.ok(result)
//            : ResponseEntity.badRequest().body(result);
//    }
    
//    @PostMapping("/register")
//    public ResponseEntity<?> register(@RequestBody DeliveryPerson person) {
//        // Encode the password before saving
//        person.setPassword(passwordEncoder.encode(person.getPassword()));
//
//        String result = deliveryService.register(person);
//        return result.contains("successful")
//            ? ResponseEntity.ok(result)
//            : ResponseEntity.badRequest().body(result);
//    }
    
    @PostMapping("/register")
    public ResponseEntity<?> registerAdmin(@RequestBody  DeliveryPerson person) {
      String result = deliveryService.register(person);
      return result.contains("successful")
          ? ResponseEntity.ok(result)
            : ResponseEntity.badRequest().body(result);
    }


    // ✅ Unassigned orders
    @GetMapping("/unassigned")
    public ResponseEntity<?> getUnassigned(@RequestParam String city , HttpSession session) {
       
        if (city == null) return ResponseEntity.status(403).body("Unauthorized");

        return ResponseEntity.ok(deliveryService.getUnassignedOrders(city));
    }

    // ✅ My orders
    @GetMapping("/myorders")
    public ResponseEntity<?> getMyOrders(HttpSession session) {
    	
//    	  return ResponseEntity.ok(deliveryService.getMyOrders(id));
    	
    	DeliveryPerson deliveryPerson = (DeliveryPerson) session.getAttribute("delivery");
        if (deliveryPerson == null) {
            return ResponseEntity.status(403).body("Unauthorized");
        }

        int did = deliveryPerson.getDid();
        return ResponseEntity.ok(deliveryService.getMyOrders(did));
    	
    	
//        Integer id = (Integer) session.getAttribute("Did");
//        if (id == null) return ResponseEntity.status(403).body("Unauthorized");
//
//        return ResponseEntity.ok(deliveryService.getMyOrders(id));
    }

    // ✅ Take order
    @PostMapping("/takeorder")
    public ResponseEntity<?> takeOrder(@RequestBody Map<String, Integer> data, HttpSession session) {
        Integer id = (Integer) session.getAttribute("Did");
        if (id == null) return ResponseEntity.status(403).body("Unauthorized");

        String result = deliveryService.takeOrder(data.get("orderId"), id);
        return result.contains("successfully")
            ? ResponseEntity.ok(result)
            : ResponseEntity.badRequest().body(result);
    }
}
